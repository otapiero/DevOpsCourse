name: CD - Continuous Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Force deployment even if CI failed (emergency only)'
        required: false
        default: false
        type: boolean
      skip_health_checks:
        description: 'Skip health checks (emergency only)'
        required: false
        default: false
        type: boolean

env:
  # Docker configuration
  REGISTRY: docker.io
  DOCKER_BUILDKIT: '1'
  COMPOSE_DOCKER_CLI_BUILD: '1'
  BUILDKIT_PROGRESS: plain
  BUILDX_NO_DEFAULT_ATTESTATIONS: '1'
  
  # Image names (constructed from Docker Hub username)
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-backend
  
  # Deployment configuration
  DEPLOYMENT_TIMEOUT: '300'  # 5 minutes timeout for deployment operations
  HEALTH_CHECK_RETRIES: '5'  # Number of health check attempts
  HEALTH_CHECK_INTERVAL: '10'  # Seconds between health check attempts
  
  # Artifact retention
  ARTIFACT_RETENTION_DAYS: '30'

jobs:
  # Only run if CI workflow succeeded or if manually triggered
  check-ci-success:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      deployment-type: ${{ steps.check.outputs.deployment-type }}
      skip-health-checks: ${{ steps.check.outputs.skip-health-checks }}
    steps:
      - name: Check if deployment should proceed
        id: check
        run: |
          echo "::group::Deployment Trigger Analysis"
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Force deploy: ${{ github.event.inputs.force_deploy }}"
          echo "Skip health checks: ${{ github.event.inputs.skip_health_checks }}"
          echo "::endgroup::"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "deployment-type=emergency" >> $GITHUB_OUTPUT
              echo "🚨 Emergency manual deployment triggered (bypassing CI status)"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "deployment-type=manual" >> $GITHUB_OUTPUT
              echo "📋 Manual deployment triggered"
            fi
            
            if [[ "${{ github.event.inputs.skip_health_checks }}" == "true" ]]; then
              echo "skip-health-checks=true" >> $GITHUB_OUTPUT
              echo "⚠️  Health checks will be skipped"
            else
              echo "skip-health-checks=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "deployment-type=automatic" >> $GITHUB_OUTPUT
            echo "skip-health-checks=false" >> $GITHUB_OUTPUT
            echo "✅ CI workflow succeeded, proceeding with automatic deployment"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "deployment-type=none" >> $GITHUB_OUTPUT
            echo "skip-health-checks=false" >> $GITHUB_OUTPUT
            echo "❌ CI workflow did not succeed (status: ${{ github.event.workflow_run.conclusion }}), skipping deployment"
            echo "::error title=Deployment Blocked::CI workflow must succeed before deployment. Use manual dispatch with force_deploy for emergency deployments."
          fi

  build-and-push:
    needs: check-ci-success
    if: needs.check-ci-success.outputs.should-deploy == 'true'
    uses: ./.github/workflows/build-push.yml
    with:
      frontend_image: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-frontend
      backend_image: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-backend
      registry: docker.io
      platforms: linux/amd64,linux/arm64
      download_artifacts: true
      artifact_name: frontend-build-18
    secrets:
      docker_username: ${{ secrets.DOCKER_HUB_USERNAME }}
      docker_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  deploy:
    needs: [check-ci-success, build-and-push]
    if: needs.check-ci-success.outputs.should-deploy == 'true'
    uses: ./.github/workflows/deploy.yml
    with:
      frontend_image: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-frontend
      backend_image: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-backend
      environment: ${{ github.event.inputs.environment || 'production' }}
      skip_health_checks: ${{ needs.check-ci-success.outputs.skip-health-checks == 'true' }}
      deployment_timeout: '300'
      health_check_retries: '5'
      health_check_interval: '10'
    secrets:
      vm_host: ${{ secrets.VM_HOST }}
      vm_username: ${{ secrets.VM_USERNAME }}
      vm_ssh_key: ${{ secrets.VM_SSH_KEY }}

  # Final status reporting job
  deployment-status:
    runs-on: ubuntu-latest
    needs: [check-ci-success, build-and-push, deploy]
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# CD Pipeline Summary Report" > cd-summary.md
          echo "" >> cd-summary.md
          echo "## Deployment Details" >> cd-summary.md
          echo "- **Trigger**: ${{ github.event_name }}" >> cd-summary.md
          echo "- **Deployment Type**: ${{ needs.check-ci-success.outputs.deployment-type }}" >> cd-summary.md
          echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> cd-summary.md
          echo "- **Force Deploy**: ${{ github.event.inputs.force_deploy || 'false' }}" >> cd-summary.md
          echo "- **Skip Health Checks**: ${{ github.event.inputs.skip_health_checks || 'false' }}" >> cd-summary.md
          echo "" >> cd-summary.md
          echo "## Job Results" >> cd-summary.md
          echo "- **CI Check**: ${{ needs.check-ci-success.result }}" >> cd-summary.md
          echo "- **Build & Push**: ${{ needs.build-and-push.result }}" >> cd-summary.md
          echo "- **Deploy**: ${{ needs.deploy.result }}" >> cd-summary.md
          echo "" >> cd-summary.md
          echo "## Build Information" >> cd-summary.md
          if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
            echo "- **Frontend Image Digest**: ${{ needs.build-and-push.outputs.frontend_digest }}" >> cd-summary.md
            echo "- **Backend Image Digest**: ${{ needs.build-and-push.outputs.backend_digest }}" >> cd-summary.md
            echo "- **Frontend Tags**: ${{ needs.build-and-push.outputs.frontend_tags }}" >> cd-summary.md
            echo "- **Backend Tags**: ${{ needs.build-and-push.outputs.backend_tags }}" >> cd-summary.md
          else
            echo "- **Build Status**: Failed - No image information available" >> cd-summary.md
          fi
          echo "" >> cd-summary.md
          echo "## Deployment Information" >> cd-summary.md
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "- **Deployment Status**: ${{ needs.deploy.outputs.deployment_status }}" >> cd-summary.md
            echo "- **Frontend URL**: ${{ needs.deploy.outputs.frontend_url }}" >> cd-summary.md
            echo "- **Backend URL**: ${{ needs.deploy.outputs.backend_url }}" >> cd-summary.md
          else
            echo "- **Deployment Status**: Failed - No deployment URLs available" >> cd-summary.md
          fi
          echo "" >> cd-summary.md
          echo "## Workflow Details" >> cd-summary.md
          echo "- **Commit SHA**: ${{ github.sha }}" >> cd-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> cd-summary.md
          echo "- **Run ID**: ${{ github.run_id }}" >> cd-summary.md
          echo "- **Run Number**: ${{ github.run_number }}" >> cd-summary.md
          echo "- **Timestamp**: $(date -u)" >> cd-summary.md
      
      - name: Check deployment status
        id: status-check
        run: |
          CI_CHECK_STATUS="${{ needs.check-ci-success.result }}"
          BUILD_PUSH_STATUS="${{ needs.build-and-push.result }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"
          
          echo "::group::Deployment Status Summary"
          echo "CI Check: $CI_CHECK_STATUS"
          echo "Build & Push: $BUILD_PUSH_STATUS"
          echo "Deploy: $DEPLOY_STATUS"
          echo "::endgroup::"
          
          # Determine overall status
          if [[ "$CI_CHECK_STATUS" == "failure" || "$BUILD_PUSH_STATUS" == "failure" || "$DEPLOY_STATUS" == "failure" ]]; then
            echo "::error title=CD Pipeline Failed::One or more deployment jobs failed"
            echo "❌ CD Pipeline Failed"
            echo "" >> cd-summary.md
            echo "## ❌ Pipeline Status: FAILED" >> cd-summary.md
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "$CI_CHECK_STATUS" == "cancelled" || "$BUILD_PUSH_STATUS" == "cancelled" || "$DEPLOY_STATUS" == "cancelled" ]]; then
            echo "::warning title=CD Pipeline Cancelled::One or more deployment jobs were cancelled"
            echo "⚠️ CD Pipeline Cancelled"
            echo "" >> cd-summary.md
            echo "## ⚠️ Pipeline Status: CANCELLED" >> cd-summary.md
            echo "status=cancelled" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "$CI_CHECK_STATUS" == "skipped" ]]; then
            echo "::notice title=CD Pipeline Skipped::Deployment was skipped due to CI failure"
            echo "⏭️ CD Pipeline Skipped"
            echo "" >> cd-summary.md
            echo "## ⏭️ Pipeline Status: SKIPPED" >> cd-summary.md
            echo "status=skipped" >> $GITHUB_OUTPUT
          else
            echo "::notice title=CD Pipeline Success::Deployment completed successfully"
            echo "✅ CD Pipeline Success"
            echo "" >> cd-summary.md
            echo "## ✅ Pipeline Status: SUCCESS" >> cd-summary.md
            echo "status=success" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload deployment summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cd-summary-report
          path: cd-summary.md
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Set final workflow status
        if: always()
        run: |
          if [[ "${{ steps.status-check.outputs.status }}" == "failure" ]]; then
            echo "::error title=Workflow Failed::CD Pipeline completed with failures"
            exit 1
          elif [[ "${{ steps.status-check.outputs.status }}" == "cancelled" ]]; then
            echo "::warning title=Workflow Cancelled::CD Pipeline was cancelled"
            exit 1
          elif [[ "${{ steps.status-check.outputs.status }}" == "skipped" ]]; then
            echo "::notice title=Workflow Skipped::CD Pipeline was skipped"
          else
            echo "::notice title=Workflow Success::CD Pipeline completed successfully"
          fi