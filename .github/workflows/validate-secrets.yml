name: Validate Secrets Configuration

on:
  workflow_dispatch:
    inputs:
      run_connectivity_tests:
        description: 'Run connectivity tests (Docker Hub and VM)'
        required: false
        default: true
        type: boolean

env:
  # Use the same environment variables as the main workflows
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/notes-backend

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate required secrets
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          echo "üîç Validating GitHub Actions Secrets Configuration"
          echo "=================================================="
          echo ""
          
          # Track validation results
          VALIDATION_FAILED=false
          
          # Function to check if a secret exists
          check_secret() {
              local secret_name=$1
              local secret_value=$2
              local is_required=$3
              
              if [ -z "$secret_value" ]; then
                  if [ "$is_required" = "true" ]; then
                      echo "‚ùå MISSING: $secret_name (REQUIRED)"
                      return 1
                  else
                      echo "‚ö†Ô∏è  OPTIONAL: $secret_name (not set)"
                      return 0
                  fi
              else
                  echo "‚úÖ FOUND: $secret_name"
                  return 0
              fi
          }
          
          # Function to validate secret format
          validate_secret_format() {
              local secret_name=$1
              local secret_value=$2
              local expected_format=$3
              
              if [ -z "$secret_value" ]; then
                  return 0  # Skip validation if secret is not set
              fi
              
              case $expected_format in
                  "docker_token")
                      if [[ $secret_value =~ ^dckr_pat_.+ ]]; then
                          echo "‚úÖ FORMAT: $secret_name (valid Docker Hub token format)"
                      else
                          echo "‚ö†Ô∏è  FORMAT: $secret_name (should start with 'dckr_pat_')"
                      fi
                      ;;
                  "ssh_key")
                      if [[ $secret_value =~ ^-----BEGIN.+PRIVATE.KEY----- ]]; then
                          echo "‚úÖ FORMAT: $secret_name (valid SSH private key format)"
                      else
                          echo "‚ùå FORMAT: $secret_name (should be a valid SSH private key)"
                          return 1
                      fi
                      ;;
                  "hostname")
                      if [[ $secret_value =~ ^[a-zA-Z0-9.-]+$ ]]; then
                          echo "‚úÖ FORMAT: $secret_name (valid hostname format)"
                      else
                          echo "‚ö†Ô∏è  FORMAT: $secret_name (should be a valid hostname or IP)"
                      fi
                      ;;
                  "username")
                      if [[ $secret_value =~ ^[a-zA-Z0-9_-]+$ ]]; then
                          echo "‚úÖ FORMAT: $secret_name (valid username format)"
                      else
                          echo "‚ö†Ô∏è  FORMAT: $secret_name (should be a valid username)"
                      fi
                      ;;
              esac
          }
          
          echo "Checking required secrets..."
          echo ""
          
          # Required Docker Hub secrets
          echo "üê≥ Docker Hub Configuration:"
          if ! check_secret "DOCKER_HUB_USERNAME" "$DOCKER_HUB_USERNAME" "true"; then
              VALIDATION_FAILED=true
          fi
          validate_secret_format "DOCKER_HUB_USERNAME" "$DOCKER_HUB_USERNAME" "username"
          
          if ! check_secret "DOCKER_HUB_ACCESS_TOKEN" "$DOCKER_HUB_ACCESS_TOKEN" "true"; then
              VALIDATION_FAILED=true
          fi
          validate_secret_format "DOCKER_HUB_ACCESS_TOKEN" "$DOCKER_HUB_ACCESS_TOKEN" "docker_token"
          
          echo ""
          
          # Required VM secrets
          echo "üñ•Ô∏è  VM Deployment Configuration:"
          if ! check_secret "VM_HOST" "$VM_HOST" "true"; then
              VALIDATION_FAILED=true
          fi
          validate_secret_format "VM_HOST" "$VM_HOST" "hostname"
          
          if ! check_secret "VM_USERNAME" "$VM_USERNAME" "true"; then
              VALIDATION_FAILED=true
          fi
          validate_secret_format "VM_USERNAME" "$VM_USERNAME" "username"
          
          if ! check_secret "VM_SSH_KEY" "$VM_SSH_KEY" "true"; then
              VALIDATION_FAILED=true
          fi
          validate_secret_format "VM_SSH_KEY" "$VM_SSH_KEY" "ssh_key"
          
          echo ""
          
          # Optional notification secrets
          echo "üì¢ Optional Notification Configuration:"
          check_secret "SLACK_WEBHOOK_URL" "$SLACK_WEBHOOK_URL" "false"
          check_secret "TEAMS_WEBHOOK_URL" "$TEAMS_WEBHOOK_URL" "false"
          
          echo ""
          echo "=================================================="
          
          # Set output for next job
          if [ "$VALIDATION_FAILED" = "true" ]; then
              echo "validation_result=failed" >> $GITHUB_OUTPUT
              echo "‚ùå VALIDATION FAILED"
              echo "Please fix the missing secrets before running the CI/CD pipeline."
          else
              echo "validation_result=passed" >> $GITHUB_OUTPUT
              echo "‚úÖ VALIDATION PASSED"
              echo "All required secrets are properly configured!"
          fi
        id: validate
      
      - name: Test Docker Hub connectivity
        if: github.event.inputs.run_connectivity_tests == 'true' && steps.validate.outputs.validation_result == 'passed'
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          echo ""
          echo "üê≥ Testing Docker Hub connectivity..."
          
          # Login to Docker Hub
          if echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login docker.io -u "$DOCKER_HUB_USERNAME" --password-stdin; then
              echo "‚úÖ Docker Hub authentication successful"
              
              # Test repository access
              echo "Testing repository access..."
              
              # Check if repositories exist (they might not exist yet)
              if docker manifest inspect "$FRONTEND_IMAGE:latest" > /dev/null 2>&1; then
                  echo "‚úÖ Frontend repository accessible: $FRONTEND_IMAGE"
              else
                  echo "‚ö†Ô∏è  Frontend repository not found (will be created on first push): $FRONTEND_IMAGE"
              fi
              
              if docker manifest inspect "$BACKEND_IMAGE:latest" > /dev/null 2>&1; then
                  echo "‚úÖ Backend repository accessible: $BACKEND_IMAGE"
              else
                  echo "‚ö†Ô∏è  Backend repository not found (will be created on first push): $BACKEND_IMAGE"
              fi
              
              docker logout docker.io
          else
              echo "‚ùå Docker Hub authentication failed"
              echo "Please verify DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESS_TOKEN"
              exit 1
          fi
      
      - name: Test VM connectivity
        if: github.event.inputs.run_connectivity_tests == 'true' && steps.validate.outputs.validation_result == 'passed'
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          echo ""
          echo "üñ•Ô∏è  Testing VM connectivity..."
          
          # Create temporary SSH key file
          SSH_KEY_FILE=$(mktemp)
          echo "$VM_SSH_KEY" > "$SSH_KEY_FILE"
          chmod 600 "$SSH_KEY_FILE"
          
          # Add VM to known hosts
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Test SSH connection
          if ssh -i "$SSH_KEY_FILE" -o ConnectTimeout=10 -o StrictHostKeyChecking=no "$VM_USERNAME@$VM_HOST" "echo 'SSH connection successful'"; then
              echo "‚úÖ SSH connection to VM successful"
              
              # Test Docker availability on VM
              if ssh -i "$SSH_KEY_FILE" -o ConnectTimeout=10 "$VM_USERNAME@$VM_HOST" "docker --version"; then
                  echo "‚úÖ Docker is available on VM"
              else
                  echo "‚ùå Docker is not available on VM"
                  echo "Please install Docker on the target VM"
                  exit 1
              fi
              
              # Test Docker Compose availability on VM
              if ssh -i "$SSH_KEY_FILE" -o ConnectTimeout=10 "$VM_USERNAME@$VM_HOST" "docker-compose --version"; then
                  echo "‚úÖ Docker Compose is available on VM"
              else
                  echo "‚ùå Docker Compose is not available on VM"
                  echo "Please install Docker Compose on the target VM"
                  exit 1
              fi
              
              # Test port availability
              echo "Testing port availability on VM..."
              if ssh -i "$SSH_KEY_FILE" -o ConnectTimeout=10 "$VM_USERNAME@$VM_HOST" "netstat -tlnp | grep -E ':(3000|5000)'" > /dev/null 2>&1; then
                  echo "‚ö†Ô∏è  Ports 3000 or 5000 are already in use on VM"
                  echo "This may cause deployment conflicts"
              else
                  echo "‚úÖ Ports 3000 and 5000 are available on VM"
              fi
              
          else
              echo "‚ùå SSH connection to VM failed"
              echo "Please verify VM_HOST, VM_USERNAME, and VM_SSH_KEY"
              echo "Ensure the SSH public key is added to ~/.ssh/authorized_keys on the VM"
              exit 1
          fi
          
          # Cleanup
          rm -f "$SSH_KEY_FILE"
      
      - name: Generate validation report
        if: always()
        run: |
          echo "# Secrets Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "## Summary" >> validation-report.md
          echo "- **Validation Result**: ${{ steps.validate.outputs.validation_result }}" >> validation-report.md
          echo "- **Connectivity Tests**: ${{ github.event.inputs.run_connectivity_tests }}" >> validation-report.md
          echo "- **Timestamp**: $(date -u)" >> validation-report.md
          echo "" >> validation-report.md
          echo "## Environment Configuration" >> validation-report.md
          echo "- **Registry**: ${{ env.REGISTRY }}" >> validation-report.md
          echo "- **Frontend Image**: ${{ env.FRONTEND_IMAGE }}" >> validation-report.md
          echo "- **Backend Image**: ${{ env.BACKEND_IMAGE }}" >> validation-report.md
          echo "" >> validation-report.md
          echo "## Next Steps" >> validation-report.md
          if [ "${{ steps.validate.outputs.validation_result }}" = "passed" ]; then
              echo "‚úÖ Your CI/CD pipeline is ready to use!" >> validation-report.md
              echo "" >> validation-report.md
              echo "You can now:" >> validation-report.md
              echo "- Push code to trigger the CI pipeline" >> validation-report.md
              echo "- Use manual deployment via workflow dispatch" >> validation-report.md
              echo "- Monitor deployments in the Actions tab" >> validation-report.md
          else
              echo "‚ùå Please fix the configuration issues before using the CI/CD pipeline." >> validation-report.md
              echo "" >> validation-report.md
              echo "For setup instructions, see:" >> validation-report.md
              echo "- `.github/DEPLOYMENT_SETUP.md`" >> validation-report.md
          fi
      
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secrets-validation-report
          path: validation-report.md
          retention-days: 30
      
      - name: Final validation result
        if: always()
        run: |
          if [ "${{ steps.validate.outputs.validation_result }}" = "failed" ]; then
              echo "::error title=Validation Failed::Please fix the missing or invalid secrets"
              exit 1
          else
              echo "::notice title=Validation Passed::All secrets are properly configured"
          fi