name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  ARTIFACT_RETENTION_DAYS: 7
  # Build configuration
  DOCKER_BUILDKIT: '1'
  COMPOSE_DOCKER_CLI_BUILD: '1'
  # Test configuration
  CI: true
  NODE_ENV: test

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Cache frontend node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-deps-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-deps-${{ runner.os }}-${{ matrix.node-version }}-
            frontend-deps-${{ runner.os }}-
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
        continue-on-error: false
      
      - name: Build frontend application
        id: build-frontend
        working-directory: frontend
        run: |
          echo "Starting frontend build..."
          npm run build 2>&1 | tee build.log
          echo "Frontend build completed successfully"
        continue-on-error: false
      
      - name: Cache frontend build
        if: success()
        uses: actions/cache@v3
        with:
          path: frontend/build
          key: frontend-build-${{ runner.os }}-${{ matrix.node-version }}-${{ github.sha }}
          restore-keys: |
            frontend-build-${{ runner.os }}-${{ matrix.node-version }}-
      
      - name: Upload frontend build artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/build/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Upload frontend build logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-logs-${{ matrix.node-version }}
          path: frontend/build.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Report build failure
        if: failure()
        run: |
          echo "::error title=Frontend Build Failed::Frontend build failed for Node.js ${{ matrix.node-version }}"
          echo "::group::Build Error Details"
          if [ -f frontend/build.log ]; then
            echo "Build log contents:"
            cat frontend/build.log
          fi
          echo "::endgroup::"

  build-backend:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Cache backend node_modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-deps-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            backend-deps-${{ runner.os }}-${{ matrix.node-version }}-
            backend-deps-${{ runner.os }}-
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
        continue-on-error: false
      
      - name: Verify backend setup
        id: verify-backend
        working-directory: backend
        run: |
          echo "Starting backend verification..."
          {
            echo "Backend dependencies installed successfully"
            node -e "console.log('Node.js version:', process.version)"
            npm list --depth=0
            echo "Backend verification completed successfully"
          } 2>&1 | tee verify.log
        continue-on-error: false
      
      - name: Run backend tests (if available)
        working-directory: backend
        run: |
          if npm run test --if-present 2>/dev/null; then
            echo "Backend tests executed successfully"
          else
            echo "No backend tests found, skipping test execution"
          fi
        continue-on-error: false
      
      - name: Upload backend verification logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-verification-logs-${{ matrix.node-version }}
          path: backend/verify.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Report backend failure
        if: failure()
        run: |
          echo "::error title=Backend Build Failed::Backend build/verification failed for Node.js ${{ matrix.node-version }}"
          echo "::group::Backend Error Details"
          if [ -f backend/verify.log ]; then
            echo "Verification log contents:"
            cat backend/verify.log
          fi
          echo "::endgroup::"

  lint:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Cache component node_modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.component }}/node_modules
          key: ${{ matrix.component }}-deps-${{ runner.os }}-18-${{ hashFiles(format('{0}/package-lock.json', matrix.component)) }}
          restore-keys: |
            ${{ matrix.component }}-deps-${{ runner.os }}-18-
            ${{ matrix.component }}-deps-${{ runner.os }}-
      
      - name: Install dependencies
        working-directory: ${{ matrix.component }}
        run: npm ci
        continue-on-error: false
      
      - name: Run ESLint
        id: lint-check
        working-directory: ${{ matrix.component }}
        run: |
          echo "Starting ESLint for ${{ matrix.component }}..."
          npm run lint 2>&1 | tee lint-results.log
          echo "ESLint completed successfully for ${{ matrix.component }}"
        continue-on-error: false
      
      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lint-results-${{ matrix.component }}
          path: ${{ matrix.component }}/lint-results.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Report lint failure
        if: failure()
        run: |
          echo "::error title=Lint Check Failed::ESLint failed for ${{ matrix.component }}"
          echo "::group::Lint Error Details"
          if [ -f ${{ matrix.component }}/lint-results.log ]; then
            echo "Lint results:"
            cat ${{ matrix.component }}/lint-results.log
          fi
          echo "::endgroup::"

  test:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: success()
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json
      
      - name: Cache component node_modules
        uses: actions/cache@v3
        with:
          path: ${{ matrix.component }}/node_modules
          key: ${{ matrix.component }}-deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles(format('{0}/package-lock.json', matrix.component)) }}
          restore-keys: |
            ${{ matrix.component }}-deps-${{ runner.os }}-${{ env.NODE_VERSION }}-
            ${{ matrix.component }}-deps-${{ runner.os }}-
      
      - name: Install dependencies
        working-directory: ${{ matrix.component }}
        run: npm ci
      
      - name: Run tests
        working-directory: ${{ matrix.component }}
        run: |
          echo "Starting tests for ${{ matrix.component }}..."
          if npm run test --if-present -- --passWithNoTests --watchAll=false --coverage 2>&1 | tee test-results.log; then
            echo "Tests completed successfully for ${{ matrix.component }}"
          else
            echo "No tests found for ${{ matrix.component }}, skipping"
            echo "No tests available" > test-results.log
          fi
        continue-on-error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.component }}
          path: |
            ${{ matrix.component }}/test-results.log
            ${{ matrix.component }}/coverage/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Report test failure
        if: failure()
        run: |
          echo "::error title=Tests Failed::Tests failed for ${{ matrix.component }}"
          echo "::group::Test Error Details"
          if [ -f ${{ matrix.component }}/test-results.log ]; then
            echo "Test results:"
            cat ${{ matrix.component }}/test-results.log
          fi
          echo "::endgroup::"

  status-check:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, lint, test]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate CI summary report
        run: |
          echo "# CI Pipeline Summary Report" > ci-summary.md
          echo "" >> ci-summary.md
          echo "## Job Results" >> ci-summary.md
          echo "- **Frontend Build**: ${{ needs.build-frontend.result }}" >> ci-summary.md
          echo "- **Backend Build**: ${{ needs.build-backend.result }}" >> ci-summary.md
          echo "- **Lint Check**: ${{ needs.lint.result }}" >> ci-summary.md
          echo "- **Tests**: ${{ needs.test.result }}" >> ci-summary.md
          echo "" >> ci-summary.md
          echo "## Workflow Details" >> ci-summary.md
          echo "- **Commit SHA**: ${{ github.sha }}" >> ci-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> ci-summary.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> ci-summary.md
          echo "- **Run ID**: ${{ github.run_id }}" >> ci-summary.md
          echo "- **Run Number**: ${{ github.run_number }}" >> ci-summary.md
          echo "- **Timestamp**: $(date -u)" >> ci-summary.md
      
      - name: Check workflow status
        id: status-check
        run: |
          FRONTEND_STATUS="${{ needs.build-frontend.result }}"
          BACKEND_STATUS="${{ needs.build-backend.result }}"
          LINT_STATUS="${{ needs.lint.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          
          echo "::group::Job Status Summary"
          echo "Frontend Build: $FRONTEND_STATUS"
          echo "Backend Build: $BACKEND_STATUS"
          echo "Lint Check: $LINT_STATUS"
          echo "Tests: $TEST_STATUS"
          echo "::endgroup::"
          
          # Check for any failures
          if [[ "$FRONTEND_STATUS" == "failure" || "$BACKEND_STATUS" == "failure" || "$LINT_STATUS" == "failure" || "$TEST_STATUS" == "failure" ]]; then
            echo "::error title=CI Pipeline Failed::One or more CI jobs failed"
            echo "❌ CI Pipeline Failed"
            echo "" >> ci-summary.md
            echo "## ❌ Pipeline Status: FAILED" >> ci-summary.md
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          elif [[ "$FRONTEND_STATUS" == "cancelled" || "$BACKEND_STATUS" == "cancelled" || "$LINT_STATUS" == "cancelled" || "$TEST_STATUS" == "cancelled" ]]; then
            echo "::warning title=CI Pipeline Cancelled::One or more CI jobs were cancelled"
            echo "⚠️ CI Pipeline Cancelled"
            echo "" >> ci-summary.md
            echo "## ⚠️ Pipeline Status: CANCELLED" >> ci-summary.md
            echo "status=cancelled" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "::notice title=CI Pipeline Passed::All CI jobs completed successfully"
            echo "✅ CI Pipeline Passed"
            echo "" >> ci-summary.md
            echo "## ✅ Pipeline Status: SUCCESS" >> ci-summary.md
            echo "status=success" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload CI summary report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ci-summary-report
          path: ci-summary.md
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Upload workflow failure logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ci-failure-logs-${{ github.run_id }}
          path: |
            ci-summary.md
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
      
      - name: Set final workflow status
        if: always()
        run: |
          if [[ "${{ steps.status-check.outputs.status }}" == "failure" ]]; then
            echo "::error title=Workflow Failed::CI Pipeline completed with failures"
            exit 1
          elif [[ "${{ steps.status-check.outputs.status }}" == "cancelled" ]]; then
            echo "::warning title=Workflow Cancelled::CI Pipeline was cancelled"
            exit 1
          else
            echo "::notice title=Workflow Success::CI Pipeline completed successfully"
          fi